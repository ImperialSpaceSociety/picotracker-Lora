/* generated by Medad Newman 27/12/19
	The following coordinates are autogenerated from a kml file containing all the polygons.
*/

#ifndef GEOFENCE_H
#define GEOFENCE_H


#include "stdint.h"


/* These are the fence polygons. There are several 
 * polygons that have the same frequency names but have a 
 * number after: EU863870_1F e.g to make them a distinct polygon 
 * Code is auto generated with python script.
 */

// GEOFENCE ARRAYS (longitude, latitude)
static float EU863870_1F[36] = { 
-21.22329,5.69349,
6.37369,-16.48638,
6.23787,-23.43953,
8.70511,-30.44255,
18.75909,-37.71921,
35.54449,-38.02720,
70.40569,-22.92416,
65.22884,-3.14600,
67.28233,20.93704,
43.97169,29.64856,
37.06587,34.98435,
34.49384,26.52420,
32.61551,32.08202,
12.86095,34.05438,
6.75486,38.22080,
-5.65814,36.09149,
-16.89894,23.66313,
-21.22329,5.69349,

};

static float EU863870_2F[12] = { 
50.44803,26.34159,
50.34092,26.03351,
50.54142,25.70977,
50.73643,26.01623,
50.71603,26.35878,
50.44803,26.34159,

};

static float EU863870_3F[14] = { 
119.35326,19.47621,
115.48607,9.96808,
118.25462,7.10011,
123.39623,4.03883,
132.14134,5.00261,
127.35130,19.55905,
119.35326,19.47621,

};

static float US902928_1F[32] = { 
-168.70273,73.32477,
-173.14487,55.59241,
-158.37536,-15.94766,
-73.01078,-60.51533,
-76.49889,-44.50321,
-70.88094,-17.08505,
-67.49103,-22.91785,
-57.68823,-19.31401,
-68.90764,4.40695,
-51.18327,5.64711,
-43.90450,53.55910,
-71.84486,72.12693,
-73.66926,78.90700,
-51.52817,84.26362,
-109.26311,84.50567,
-168.70273,73.32477,

};

static float AS923925_1F[12] = { 
114.06400,4.89831,
114.52543,3.95084,
115.46751,4.26588,
115.18186,5.06795,
114.73417,5.25396,
114.06400,4.89831,

};

static float AS923925_2F[14] = { 
111.72826,21.97293,
115.44164,19.27934,
122.73656,20.74515,
123.20570,26.19993,
121.80764,26.38139,
115.41967,23.93538,
111.72826,21.97293,

};

static float AS923925_3F[28] = { 
92.01692,5.86666,
103.00325,-10.41292,
120.58137,-11.62069,
128.31575,-9.54732,
139.56575,-9.72062,
141.32356,3.58943,
122.51497,3.76485,
117.76887,3.94023,
112.49518,1.39063,
108.40480,-0.48386,
104.45524,-0.25706,
98.09623,4.87675,
94.88327,7.30090,
92.01692,5.86666,

};

static float AS923925_4F[22] = { 
98.90643,12.75471,
97.08270,7.02099,
100.15887,6.43181,
106.24529,5.29523,
112.57342,9.93283,
110.90612,16.62593,
106.24529,23.34903,
101.60622,22.81417,
97.24373,19.18170,
98.00054,15.84301,
98.90643,12.75471,

};

static float US902928_2F[20] = { 
-67.49103,-22.91785,
-70.28316,-31.75017,
-71.60152,-45.96913,
-72.21675,-51.90602,
-66.76753,-55.44369,
-52.95398,-39.95226,
-47.43353,-33.89651,
-57.19000,-30.69796,
-57.68823,-19.31401,
-67.49103,-22.91785,

};

static float AU915928_1F[16] = { 
-68.90764,4.40695,
-57.68823,-19.31401,
-57.19000,-30.69796,
-52.26812,-32.34613,
-32.69593,-31.84013,
-26.84638,-1.51932,
-51.18327,5.64711,
-68.90764,4.40695,

};

static float AU915928_2F[16] = { 
-70.88094,-17.08505,
-76.49889,-44.50321,
-73.01078,-60.51533,
-66.76753,-55.44369,
-72.21675,-51.90602,
-70.28316,-31.75017,
-67.49103,-22.91785,
-70.88094,-17.08505,

};

static float CN470510_1F[36] = { 
82.29205,48.54875,
67.87798,37.82644,
82.86334,29.67296,
87.89547,26.80085,
96.70611,29.04099,
108.65923,20.43133,
110.80828,20.99835,
116.20393,24.16117,
121.31548,26.23843,
122.37017,36.70735,
136.08111,45.18528,
133.33570,48.85359,
120.61236,54.65108,
114.98736,49.69904,
99.81818,51.35649,
88.22016,48.70281,
84.92757,49.23314,
82.29205,48.54875,

};

static float IN865867_1F[16] = { 
72.96580,34.26699,
66.72556,23.19668,
75.16306,4.16647,
82.85421,2.39383,
85.70994,6.96542,
90.36814,21.24408,
87.89547,26.80085,
72.96580,34.26699,

};

static float AS920923_1F[16] = { 
139.68654,45.95900,
139.33497,45.52965,
133.77174,38.66725,
127.49247,32.03204,
131.95216,27.30372,
144.78419,33.95272,
150.49708,45.34464,
139.68654,45.95900,

};

static float KR920923_1F[12] = { 
122.94546,36.60046,
122.59912,32.47361,
127.43020,32.04833,
131.57778,36.55510,
130.19876,40.76658,
122.94546,36.60046,

};

static float AS920923_2F[30] = { 
97.26683,6.67666,
99.27305,3.85647,
102.22180,1.30487,
104.34551,-0.06553,
108.43935,-0.34457,
110.23070,0.67130,
114.97679,2.25276,
119.32738,4.70897,
116.95433,7.63591,
115.18186,5.06795,
115.46751,4.26588,
114.52543,3.95084,
114.06400,4.89831,
102.01292,5.97782,
97.26683,6.67666,

};

static float AU915928_3F[26] = { 
119.84993,-43.64813,
131.06762,-51.28254,
145.93096,-55.22234,
169.37107,-54.07644,
179.46983,-48.46908,
179.63306,-38.42140,
171.92924,-16.91222,
148.12775,-14.43550,
141.14083,-8.43254,
128.98378,-9.52913,
109.15307,-14.41378,
99.08073,-36.79314,
119.84993,-43.64813,

};

static float RU864870_1F[50] = { 
114.00630,77.20060,
27.20759,70.95692,
31.56924,63.02777,
27.95082,59.36052,
28.45041,56.30347,
32.09601,53.03805,
38.44658,50.46738,
40.82452,48.92639,
35.67013,45.21170,
39.49369,43.16172,
48.66651,41.91436,
49.50708,46.73458,
45.91863,48.39790,
53.70648,49.72825,
62.18802,50.25236,
68.29710,51.37026,
72.82657,52.77560,
76.84853,51.31352,
88.21380,48.68017,
99.53778,51.41911,
114.90962,49.99259,
120.64929,54.65274,
154.20179,44.98566,
173.75796,69.91542,
114.00630,77.20060,

};

static float EU863870_4F[76] = { 
-71.71870,78.35168,
-45.13904,53.93611,
-34.49162,49.45897,
-41.01292,34.67850,
-26.33114,10.21090,
-19.13538,11.26893,
-16.75165,23.55956,
-5.54613,35.62518,
6.61843,38.10661,
12.71712,34.32510,
33.93480,31.83469,
36.55469,35.56712,
44.19108,29.54567,
67.41226,21.01873,
73.93022,35.37353,
67.73073,38.13921,
81.77174,48.33576,
84.33079,49.20482,
77.06897,51.19661,
72.90484,52.70164,
68.15619,51.22012,
62.30322,50.09428,
53.80241,49.57254,
46.02093,48.56997,
49.61500,46.92261,
48.56072,41.66768,
39.85040,43.02380,
35.60168,45.18883,
41.00384,48.89668,
38.18940,50.86833,
31.85052,53.07085,
28.40434,56.34850,
27.98583,59.48825,
31.66246,63.29655,
27.10220,71.16545,
73.60816,78.68579,
24.27672,85.98405,
-71.71870,78.35168,

};




/* Defining the frequencies to transmit on. Currently holding dummy values
 * I think there has to be a list of frequencies instead, because it has 
 * to try all
 */




// VARIABLES
extern uint32_t GEOFENCE_no_tx;



// FUNCTIONS
int32_t pointInPolygon(int32_t polyCorners, int32_t * polygon, int32_t latitude, int32_t longitude);
int32_t pointInPolygonF(int32_t polyCorners, float * polygon, float latitude, float longitude);
void GEOFENCE_position(float latitude, float longitude);



#endif 
